{"version":3,"sources":["assets/img/verified-logo.svg","assets/img/arrow-logo.svg","assets/img/comment_icon.svg","assets/img/repost_icon.svg","assets/img/like_icon.svg","assets/img/share_icon.svg","components/Action.jsx","components/Post.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Action","props","className","src","img","alt","count","actionsBlock","type","commentIcon","repostIcon","likeIcon","shareIcon","map","el","i","key","Post","author","photo","name","verifiedIcon","nickname","date","arrowIcon","content","image","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,+LCY5BC,MATf,SAAgBC,GACd,OACE,yBAAKC,UAAU,UACb,yBAAKC,IAAKF,EAAMG,IAAKC,IAAI,gBACzB,8BAAOJ,EAAMK,S,gEC0BbC,EAvBe,CACnB,CACEC,KAAM,UACNJ,IAAKK,IACLH,MAAO,KAET,CACEE,KAAM,SACNJ,IAAKM,IACLJ,MAAO,KAET,CACEE,KAAM,OACNJ,IAAKO,IACLL,MAAO,KAET,CACEE,KAAM,QACNJ,IAAKQ,IACLN,MAAO,KAIuBO,KAAK,SAACC,EAAIC,GAAL,OAAW,kBAAC,EAAD,CAAQX,IAAKU,EAAGV,IAAKE,MAAOQ,EAAGR,MAAOU,IAAKD,OAgC9EE,MA7Bf,SAAchB,GACZ,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,mBACb,yBAAKC,IAAKF,EAAMiB,OAAOC,MAAOd,IAAI,eAEpC,yBAAKH,UAAU,mBACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,aACb,4BAAKD,EAAMiB,OAAOE,MAClB,yBAAKjB,IAAKkB,IAAchB,IAAI,kBAC5B,wCAAUJ,EAAMiB,OAAOI,SAAvB,iBAAqCrB,EAAMsB,OAC3C,yBAAKpB,IAAKqB,IAAWnB,IAAI,aAAaH,UAAU,gBAElD,yBAAKA,UAAU,gBACb,2BAAID,EAAMwB,WAGd,yBAAKvB,UAAU,qBACb,yBAAKC,IAAKF,EAAMyB,MAAOrB,IAAI,cAE7B,yBAAKH,UAAU,iBACZK,MClCIoB,MAhBf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,CAAMgB,OAAQ,CACRE,KAAM,mBACND,MARS,6FASTG,SAAU,eAEZG,QAAQ,kDACRC,MAXQ,gGAYRH,KAAM,mCCNIK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.01f38c27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/verified-logo.2019cadf.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-logo.1cd146fe.svg\";","module.exports = __webpack_public_path__ + \"static/media/comment_icon.6344ee7b.svg\";","module.exports = __webpack_public_path__ + \"static/media/repost_icon.a9a99fc3.svg\";","module.exports = __webpack_public_path__ + \"static/media/like_icon.57c9a039.svg\";","module.exports = __webpack_public_path__ + \"static/media/share_icon.8e82847c.svg\";","import React from 'react';\n\n\nfunction Action(props) {\n  return (\n    <div className='action'>\n      <img src={props.img} alt='action_icon'/>\n      <span>{props.count}</span>\n    </div>\n  );\n}\n\nexport default Action;\n","import React from 'react';\nimport verifiedIcon from '../assets/img/verified-logo.svg';\nimport arrowIcon from '../assets/img/arrow-logo.svg';\nimport Action from './Action';\nimport commentIcon from '../assets/img/comment_icon.svg';\nimport repostIcon from '../assets/img/repost_icon.svg';\nimport likeIcon from '../assets/img/like_icon.svg';\nimport shareIcon from '../assets/img/share_icon.svg';\n\n\nconst ACTIONS_DATA = [\n  {\n    type: 'comment',\n    img: commentIcon,\n    count: 482\n  },\n  {\n    type: 'repost',\n    img: repostIcon,\n    count: 146\n  },\n  {\n    type: 'like',\n    img: likeIcon,\n    count: 887\n  },\n  {\n    type: 'share',\n    img: shareIcon,\n    count: ''\n  }\n]\n\nconst actionsBlock = ACTIONS_DATA.map( (el, i) => <Action img={el.img} count={el.count} key={i}/>)\n\n\nfunction Post(props) {\n  return (\n    <div className='post'>\n      <div className='user-logo-block'>\n        <img src={props.author.photo} alt='user_logo'/>\n      </div>\n      <div className='post-info-block'>\n        <div className='text-block'>\n          <div className='post-info'>\n            <h4>{props.author.name}</h4>\n            <img src={verifiedIcon} alt='verified_icon'/>\n            <span>{`${props.author.nickname} · ${props.date}`}</span>\n            <img src={arrowIcon} alt='arrow_icon' className='arrow-icon'/>\n          </div>\n          <div className='post-content'>\n            <p>{props.content}</p>\n          </div>\n        </div>\n        <div className='content-img-block'>\n          <img src={props.image} alt='post_img'/>\n        </div>\n        <div className='actions-block'>\n          {actionsBlock}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;\n","import React from 'react';\nimport './App.css';\nimport Post from './components/Post';\n\n\nconst ANAKIN_IMAGE = \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\nconst RAY_IMAGE = \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Post author={{\n            name: \"Anakin Skywalker\",\n            photo: ANAKIN_IMAGE,\n            nickname: \"@dart_vader\"\n        }}\n          content=\"WTF? Who is Ray? Why she is Skywalker? Luke...?\"\n          image={RAY_IMAGE}\n          date={\"26 февр.\"}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}